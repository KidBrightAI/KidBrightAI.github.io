!function(e){var t={};function n(o){if(t[o])return t[o].exports;var l=t[o]={i:o,l:!1,exports:{}};return e[o].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(o,l,function(t){return e[t]}.bind(null,l));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(object,e){return Object.prototype.hasOwnProperty.call(object,e)},n.p="/_nuxt/",n(n.s=0)}([function(module,exports){importScripts("https://cdn.jsdelivr.net/npm/@tensorflow/tfjs");let processing=!1,sourceCode="",__model=null,__labels=[],__image=null,__data=null,__maxIndex=0,responseCallback=null,eventCallback=[],requestCommand=null;const requestData=async function(e,t){requestCommand=e;let n={command:"REQUEST",data:e};t&&(n=Object.assign(n,t)),postMessage(n);let o=new Promise((e=>responseCallback=e));return await o},registerCallback=async function(e,t){eventCallback.push({name:e,callback:t})},unregisterCallback=async function(e){eventCallback=eventCallback.filter((t=>t.name!=e))},loadingModel=async function(){let e=await requestData("MODEL");__model=await tf.loadLayersModel(tf.io.fromMemory(e.modelJson.modelTopology,e.modelJson.weightsManifest[0].weights,e.weight))},__classify=async function(img){let e=__model.layers[0].inputSpec[0].shape;const t=tf.tidy((()=>{const t=tf.add(tf.mul(tf.cast(img,"float32"),2/255),-1);let n=tf.image.resizeBilinear(t,[e[1],e[2]],!0);return tf.reshape(n,[-1,e[1],e[2],e[3]])}));return await __model.predict(t)},initModel=async function(){postMessage({command:"PRINT",msg:"Loading model\r\n"}),await loadingModel(),postMessage({command:"PRINT",msg:"Loading labels\r\n"}),postMessage({command:"PRINT",msg:"Label : "+__labels.join(",")+"\r\n"});let e=__model.layers[0].inputSpec[0].shape;postMessage({command:"PRINT",msg:"Model Input Shape : "+e.join(",")+"\r\n"}),postMessage({command:"PRINT",msg:"Preloading model\r\n"});const t=tf.zeros([1,e[1],e[2],e[3]],"int32"),n=await __model.predict(t);await n.data();n.dispose(),t.dispose(),postMessage({command:"PRINT",msg:"Preload model success\r\n"}),postMessage({command:"PRINT",msg:"Model loaded\r\n"})},classifyVoice=async function(){for(;null==__image;)await new Promise((e=>setTimeout(e,100)));let e=await tf.browser.fromPixels(__image),t=await __classify(e);__data=t.dataSync(),__maxIndex=t.argMax(1).dataSync()[0],__image=null},evaluateAllDataset=async function(){await initModel();let e=await requestData("DATASETS"),t=0,n=0;for(let dt of e.data){let e=dt.id,image=await requestData("MFCC",{id:e}),o=await tf.browser.fromPixels(image),l=await __classify(o),r=(l.dataSync(),l.argMax(1).dataSync()[0]);__labels[r]==dt.class?t+=1:n+=1,postMessage({command:"PRINT",msg:`Correct : ${t} , Failed : ${n}\r\n`})}postMessage({command:"PRINT",msg:`Accuracy : ${t/(t+n)*100}%\r\n`})};onmessage=async e=>{if("RUN"==e.data.command)sourceCode=e.data.code,__labels=e.data.labels,processing||(processing=!0,process());else if("RESPONSE"==e.data.command)e.data.subcommand==requestCommand&&responseCallback(e.data.data);else if("WRITE"==e.data.command)"VOICE"==e.data.subcommand&&(__image=e.data.data);else if("EVENT"==e.data.command){let t=eventCallback.filter((t=>t.name==e.data.subcommand));for(let n of t)"AsyncFunction"==n.callback.constructor.name?await n.callback(e.data.data):n.callback(e.data.data)}};const process=function(){try{eval(sourceCode)}catch(e){postMessage({command:"PRINT",msg:"ERROR !!! \r\n"+e.message})}}}]);